configfile: "config/config.yaml"

# These are SLiM simulation parameters
MU = config["mu"]
W = config["w"]
CHROMOSOME = config["chromosome"]
DEMOGRAPHY = config["demography"]
SLIM_SEED = config["slim_seed"]

# Selection coefficient simulation parameters
SHAPE = config["shape"]
SCALE = config["scale"]
POP_SIZE = config["N"]

# These are effect size simulation parameters
DEGREE = config["degree"]
EFFECT_SIZE_SEED = config["effect_size_seed"]

# These are phenotype simulation parameters
H2 = config["h2"]
PHENOTYPE_SEED = config["phenotype_seed"]

# These are recapitate and neutral simulation parameters
NEUTRAL_MU = config["neutral_mu"]
ANCESTRAL_NE = config["ancestral_Ne"]
RECAPITATE_SEED = config["recapitate_seed"]
NEUTRAL_SEED = config["neutral_seed"]

# These are scaling parameters that are important for simulation
SELECTION_SCALING_PARAMETER = config["scaling_selection"]

# These parameters are the basis of all simulations
# Put chromosome in a different directory, as we will be using the same
# parameter combinations for simulating various chromosomes
output_pattern = (
    "mu_{mu}_w_{w}_shape_{shape}_scale_{scale}_N_{N}"
    "_dem_{demography}_slimseed_{slim_seed}/chromosome_{chromosome}"
)

# Folder pattern
folder_pattern = (
    "output/" + output_pattern
)

# These parameters are used to simulate effect sizes from mutation's selection coefficients
effect_size_pattern = (
    "degree_{degree}_effectseed_{effect_size_seed}"
)

# These parameters are used to simulate phenotypes of individuals
phenotype_pattern = (
    effect_size_pattern + "_h2_{h2}_phenoseed_{phenotype_seed}"
)

# These parameters are used for simulating neutral burn-in (recapitation) and neutral mutations
recapitate_neutral_pattern = (
    "ancestralNe_{ancestral_Ne}_recapseed_{recapitate_seed}" +
    "_neutralmu_{neutral_mu}_neutralseed_{neutral_seed}"
)

sim_results_tree = expand(
    f"{folder_pattern}/processed_ts_{recapitate_neutral_pattern}.tree.tsz",
    mu=MU, w=W, shape=SHAPE, scale=SCALE, N=POP_SIZE, chromosome=CHROMOSOME,
    demography=DEMOGRAPHY, slim_seed=SLIM_SEED, ancestral_Ne=ANCESTRAL_NE,
    recapitate_seed=RECAPITATE_SEED, neutral_mu=NEUTRAL_MU,
    neutral_seed=NEUTRAL_SEED
)

sim_results_plink_phenotype = expand(
    f"{folder_pattern}/plink_phenotype_{phenotype_pattern}.txt",
    mu=MU, w=W, shape=SHAPE, scale=SCALE, N=POP_SIZE, chromosome=CHROMOSOME,
    demography=DEMOGRAPHY, slim_seed=SLIM_SEED, degree=DEGREE,
    effect_size_seed=EFFECT_SIZE_SEED, h2=H2, phenotype_seed=PHENOTYPE_SEED
)

rule all:
    input:
        sim_results_tree,
        sim_results_plink_phenotype,

rule slim_underdominance:
    output:
        f"{folder_pattern}/slim_allele_ts.tree",
    log:
        f"logs/{output_pattern}/slim.log",
    conda:
        "envs/slim.yaml"
    shell:
        (
            "slim -d MUTATION_RATE={wildcards.mu} -d w={wildcards.w} -d shape={wildcards.shape} "
            + "-d scale={wildcards.scale} -d SEED={wildcards.slim_seed} -d 'tree_filename=\"{output}\"' "
            + "-d N={wildcards.N} -d selection_scaling={SELECTION_SCALING_PARAMETER} "
            + "-d 'RECOMBINATION_MAP=\"recombination_map/HapMapII_GRCh38/genetic_map_Hg38_chr{wildcards.chromosome}.txt\"' "
            + "-d 'JSON_FILE=\"demography/{wildcards.demography}.json\"' "
            + "workflow/scripts/underdominance_demography_genetic_map.slim > {log}"
        )

rule tszip_compression:
    input:
        f"{folder_pattern}/slim_allele_ts.tree",
    output:
        f"{folder_pattern}/slim_allele_ts.tree.tsz",
    conda:
        "envs/simulation.yaml"
    shell:
        "tszip {input}"

rule convert_allele:
    output:
        f"{folder_pattern}/nucleotide_ts.tree.tsz",
    input:
        f"{folder_pattern}/slim_allele_ts.tree.tsz",
    log:
        f"logs/{output_pattern}/convert_allele.log",
    conda:
        "envs/simulation.yaml"
    script:
        "scripts/convert_allele.py"

rule effect_size_simulation:
    output:
        f"{folder_pattern}/effect_size_{effect_size_pattern}.csv",
    input:
        f"{folder_pattern}/nucleotide_ts.tree.tsz",
    log:
        f"logs/{output_pattern}/effect_size_{effect_size_pattern}.log",
    params:
        w=lambda wildcards: wildcards.w,
        degree=lambda wildcards: wildcards.degree,
        selection_scaling=SELECTION_SCALING_PARAMETER,
        seed=lambda wildcards: wildcards.effect_size_seed,
    conda:
        "envs/simulation.yaml"
    script:
        "scripts/effect_size_simulation.py"


rule phenotype_simulation:
    output:
        f"{folder_pattern}/phenotype_{phenotype_pattern}.csv",
    input:
        ts=f"{folder_pattern}/nucleotide_ts.tree.tsz",
        mutation_df=f"{folder_pattern}/effect_size_{effect_size_pattern}.csv",
    params:
        h2=lambda wildcards: wildcards.h2,
        seed=lambda wildcards: wildcards.phenotype_seed,
    log:
        f"logs/{output_pattern}/phenotype_{phenotype_pattern}.log",
    conda:
        "envs/simulation.yaml"
    script:
        "scripts/phenotype_simulation.py"

rule plink_phenotype:
    output:
        f"{folder_pattern}/plink_phenotype_{phenotype_pattern}.txt",
    input:
        ts=f"{folder_pattern}/nucleotide_ts.tree.tsz",
        phenotype_df=f"{folder_pattern}/phenotype_{phenotype_pattern}.csv",
    log:
        f"logs/{output_pattern}/plink_phenotype_{phenotype_pattern}.log",
    conda:
        "envs/simulation.yaml"
    script:
        "scripts/obtain_plink_phenotype.py"
    

rule neutral_recapitate_simulation:
    output:
        f"{folder_pattern}/processed_ts_{recapitate_neutral_pattern}.tree.tsz",
    input:
        f"{folder_pattern}/nucleotide_ts.tree.tsz",
    log:
        f"logs/{output_pattern}/neutral_recapitate_{recapitate_neutral_pattern}.log",
    params:
        genetic_map=lambda wildcards: f"recombination_map/HapMapII_GRCh38/genetic_map_Hg38_chr{wildcards.chromosome}.txt",
        ancestral_Ne = lambda wildcards: wildcards.ancestral_Ne,
        recapitate_seed = lambda wildcards: wildcards.recapitate_seed,
        neutral_mu = lambda wildcards: wildcards.neutral_mu,
        neutral_seed = lambda wildcards: wildcards.neutral_seed,
    conda:
        "envs/simulation.yaml"
    script:
        "scripts/neutral_recapitate_simulation.py"
