configfile: "config/config.yaml"

# These are SLiM simulation parameters
MU = config["mu"]
W = config["w"]
CHROMOSOME = config["chromosome"]
DEMOGRAPHY = config["demography"]
SLIM_SEED = config["slim_seed"]

# Selection coefficient simulation parameters
SHAPE = config["shape"]
SCALE = config["scale"]

# These are effect size simulation parameters
DEGREE = config["degree"]
EFFECT_SIZE_SEED = config["effect_size_seed"]

# These are phenotype simulation parameters
H2 = config["h2"]
PHENOTYPE_SEED = config["phenotype_seed"]

# These are recapitate and neutral simulation parameters
NEUTRAL_MU = config["neutral_mu"]
ANCESTRAL_NE = config["ancestral_Ne"]
RECAPITATE_SEED = config["recapitate_seed"]
NEUTRAL_SEED = config["neutral_seed"]


# These are scaling parameters that are important for simulation
SELECTION_SCALING_PARAMETER = config["scaling_selection"]

# These are parameters for selecting individual IDs
YRI_NUMBER = config["YRI_number"]
CEU_NUMBER = config["CEU_number"]
INDIVIDUAL_SEED = config["individual_seed"]

# These are parameters for sampling tree sequence
MAF = config["MAF"]

# These parameters are the basis of all simulations
# Put chromosome in a different directory, as we will be using the same
# parameter combinations for simulating various chromosomes
basic_pattern_without_chromosome  = (
    "mu_{mu}_w_{w}_shape_{shape}_scale_{scale}"
    "_dem_{demography}_slimseed_{slim_seed}"
)

output_pattern = (
    basic_pattern_without_chromosome + "/chromosome_{chromosome}"
)


# Folder pattern
folder_pattern_without_chromosome = (
    "output/" + basic_pattern_without_chromosome
)

folder_pattern = (
    "output/" + output_pattern
)

# These parameters are used for simulating neutral burn-in (recapitation) and neutral mutations
recapitate_neutral_pattern = (
    "ancestralNe_{ancestral_Ne}_recapseed_{recapitate_seed}" +
    "_neutralmu_{neutral_mu}_neutralseed_{neutral_seed}"
)

# These parameters are used to select individual IDs
individual_id_pattern = (
    "yri_{yri}_ceu_{ceu}_individualseed_{individual_seed}"
)

# These parameters are used to simulate effect sizes from mutation's selection coefficients
effect_size_pattern = (
    individual_id_pattern + "_degree_{degree}_effectseed_{effect_size_seed}"
)

# These parameters are used to simulate phenotypes of individuals
phenotype_pattern = (
    effect_size_pattern + "_h2_{h2}_phenoseed_{phenotype_seed}"
)

plink_phenotype_pattern = (
    "plink_phenotype_" + phenotype_pattern
)


# These parameters are used to sample tree sequence
sample_tree_seq_pattern = (
    recapitate_neutral_pattern + individual_id_pattern + "_MAF_{maf}"
)

#sim_results_plink_phenotype = expand(
#    f"{folder_pattern_without_chromosome}/{plink_phenotype_pattern}.txt",
#    mu=MU, w=W, shape=SHAPE, scale=SCALE, N=POP_SIZE,
#    demography=DEMOGRAPHY, slim_seed=SLIM_SEED, degree=DEGREE,
#    effect_size_seed=EFFECT_SIZE_SEED, h2=H2, phenotype_seed=PHENOTYPE_SEED,
#    yri=YRI_NUMBER, ceu=CEU_NUMBER, individual_seed=INDIVIDUAL_SEED
#)

#final_output = expand(
#    f"{folder_pattern}/{sample_tree_seq_pattern}.vcz",
#    mu=MU, w=W, shape=SHAPE, scale=SCALE, N=POP_SIZE, chromosome=CHROMOSOME,
#    demography=DEMOGRAPHY, slim_seed=SLIM_SEED, ancestral_Ne=ANCESTRAL_NE,
#    recapitate_seed=RECAPITATE_SEED, neutral_mu=NEUTRAL_MU,
#    neutral_seed=NEUTRAL_SEED,
#    yri=YRI_NUMBER, ceu=CEU_NUMBER,
#    individual_seed=INDIVIDUAL_SEED,
#    maf=MAF
#)

relatedness_table = expand(
    f"{folder_pattern}/individual_parents.csv",
    mu=MU, w=W, shape=SHAPE, scale=SCALE, chromosome=CHROMOSOME,
    demography=DEMOGRAPHY, slim_seed=SLIM_SEED
)

rule all:
    input:
        relatedness_table,
        #sim_results_plink_phenotype,
        #final_output,

rule slim_underdominance:
    output:
        f"{folder_pattern}/slim_allele_ts.tree",
    log:
        f"logs/{output_pattern}/slim.log",
    conda:
        "slim"
    shell:
        (
            "slim -d MUTATION_RATE={wildcards.mu} -d w={wildcards.w} -d shape={wildcards.shape} "
            + "-d scale={wildcards.scale} -d SEED={wildcards.slim_seed} -d 'tree_filename=\"{output}\"' "
            + "-d selection_scaling={SELECTION_SCALING_PARAMETER} "
            + "-d 'RECOMBINATION_MAP=\"recombination_map/HapMapII_GRCh38/genetic_map_Hg38_chr{wildcards.chromosome}.txt\"' "
            + "-d 'JSON_FILE=\"demography/{wildcards.demography}.json\"' "
            + "workflow/scripts/underdominance_demography_genetic_map.slim > {log}"
        )

rule obtain_parents:
    output:
        f"{folder_pattern}/individual_parents.csv",
    input:
        f"{folder_pattern}/slim_allele_ts.tree",
    log:
        f"logs/{output_pattern}/obtain_parents.log",
    conda:
        "simulation"
    script:
        "scripts/obtain_parents.py"
    

#rule tszip_compression:
#    input:
#        f"{folder_pattern}/{{sample}}.tree",
#    output:
#        f"{folder_pattern}/{{sample}}.tree.tsz",
#    conda:
#        "simulation"
#    shell:
#        "tszip {input}"

rule generate_individual_id:
    output:
        f"{folder_pattern_without_chromosome}/individualid_{individual_id_pattern}.csv",
    input:
        f"{folder_pattern_without_chromosome}/chromosome_{CHROMOSOME[0]}/slim_allele_ts.tree",
    log:
        f"logs/{folder_pattern_without_chromosome}/generate_individual_id_{individual_id_pattern}.log",
    params:
        yri_number=lambda wildcards: wildcards.yri,
        ceu_number=lambda wildcards: wildcards.ceu,
        seed=lambda wildcards: wildcards.individual_seed,
    conda:
        "simulation"
    script:
        "scripts/obtain_individual_id.py"

rule subset_treeseq:
    output:
        f"{folder_pattern}/subset_nucleotide_{individual_id_pattern}.tree",
    input:
        individual_id=f"{folder_pattern_without_chromosome}/individualid_{individual_id_pattern}.csv",
        ts=f"{folder_pattern}/slim_allele_ts.tree",
    log:
        f"logs/{folder_pattern}/subset_nucleotide_{individual_id_pattern}.log",
    conda:
        "simulation"
    script:
        "scripts/subset_treeseq.py"


rule effect_size_simulation:
    output:
        f"{folder_pattern}/effect_size_{effect_size_pattern}.csv",
    input:
        f"{folder_pattern}/subset_nucleotide_{individual_id_pattern}.tree",
    log:
        f"logs/{output_pattern}/effect_size_{effect_size_pattern}.log",
    params:
        w=lambda wildcards: wildcards.w,
        degree=lambda wildcards: wildcards.degree,
        selection_scaling=SELECTION_SCALING_PARAMETER,
        seed=lambda wildcards: wildcards.effect_size_seed,
    conda:
        "simulation"
    script:
        "scripts/effect_size_simulation.py"


rule phenotype_simulation:
    output:
        f"{folder_pattern}/phenotype_{phenotype_pattern}.csv",
    input:
        ts=f"{folder_pattern}/subset_nucleotide_{individual_id_pattern}.tree",
        mutation_df=f"{folder_pattern}/effect_size_{effect_size_pattern}.csv",
    params:
        h2=lambda wildcards: wildcards.h2,
        seed=lambda wildcards: wildcards.phenotype_seed,
    log:
        f"logs/{output_pattern}/phenotype_{phenotype_pattern}.log",
    conda:
        "simulation"
    script:
        "scripts/phenotype_simulation.py"


rule plink_phenotype:
    output:
        f"{folder_pattern_without_chromosome}/{plink_phenotype_pattern}.txt"
    input:
        phenotype_df_list=expand(f"{folder_pattern}/phenotype_{phenotype_pattern}.csv", chromosome=CHROMOSOME, allow_missing=True),
        individual_id=f"{folder_pattern_without_chromosome}/individualid_{individual_id_pattern}.csv",
    log:
        f"logs/{folder_pattern_without_chromosome}/{plink_phenotype_pattern}.log",
    conda:
        "simulation"
    script:
        "scripts/obtain_plink_phenotype.py"

rule neutral_recapitate_simulation:
    output:
        f"{folder_pattern}/processed_ts_{sample_tree_seq_pattern}.tree",
    input:
        f"{folder_pattern}/subset_nucleotide_{individual_id_pattern}.tree",
    log:
        f"logs/{output_pattern}/neutral_recapitate_{sample_tree_seq_pattern}.log",
    params:
        genetic_map=lambda wildcards: f"recombination_map/HapMapII_GRCh38/genetic_map_Hg38_chr{wildcards.chromosome}.txt",
        ancestral_Ne = lambda wildcards: wildcards.ancestral_Ne,
        recapitate_seed = lambda wildcards: wildcards.recapitate_seed,
        neutral_mu = lambda wildcards: wildcards.neutral_mu,
        neutral_seed = lambda wildcards: wildcards.neutral_seed,
        maf=lambda wildcards: wildcards.maf,
    conda:
        "simulation"
    script:
        "scripts/neutral_recapitate_simulation.py"

rule generate_vcz:
    output:
        directory(f"{folder_pattern}/{sample_tree_seq_pattern}.vcz"),
    input:
        ts=f"{folder_pattern}/processed_ts_{sample_tree_seq_pattern}.tree",
        individual_id=f"{folder_pattern_without_chromosome}/individualid_{individual_id_pattern}.csv",
    params:
        chromosome=lambda wildcards: wildcards.chromosome
    log:
        f"logs/{output_pattern}/sample_tree_seq_{sample_tree_seq_pattern}.log"
    conda:
        "vcz_plink_conversion"
    threads:
        3
    resources:
        cpus_per_task=3,
        mem_mb_per_cpu=100000
    script:
        "scripts/generate_vcz.py"
